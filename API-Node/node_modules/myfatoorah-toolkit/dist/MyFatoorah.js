"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const types_1 = require("./types");
class MyFatoorah {
    /**
     * Initialize your myfatoorah object
     * @param countryIso
     * @param testMode
     * @param apiKey
     */
    constructor(countryIso, testMode, apiKey = config_1.TEST_TOKEN) {
        this.countryIso = countryIso;
        this.testMode = testMode;
        this.apiKey = apiKey;
        if (!testMode && apiKey === config_1.TEST_TOKEN) {
            throw new Error('You must provide your own api key when test mode is disabled.');
        }
        if (testMode) {
            this.apiUrl = config_1.TEST_API_URL;
        }
        else {
            if (this.countryIso === 'SAU') {
                this.apiUrl = config_1.LIVE_SA_API_URL;
            }
            else {
                this.apiUrl = config_1.LIVE_API_URL;
            }
        }
        this.apiInstance = (0, config_1.createApiInstance)(this.apiUrl, this.apiKey);
    }
    get getCountry() {
        return this.countryIso;
    }
    /**
     * return a list of Payment Methods that you need in Execute Payment
     * @param amount
     * @param currencyIso default currency depends on the countryIso
     */
    initiatePayment(amount, currencyIso = types_1.ECurrencyCode[this.getCountry]) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.initiate, {
                    InvoiceAmount: amount,
                    CurrencyIso: currencyIso
                });
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
    /**
     * generate an invoice link that can be sent by any channel we support
     * @param invoiceValue
     * @param customerName
     * @param notificationOption EML | SMS | LNK | ALL
     * @param _data
     */
    sendPayment(invoiceValue, customerName, notificationOption, _data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.sendPayment, Object.assign({ NotificationOption: notificationOption, CustomerName: customerName, InvoiceValue: invoiceValue, DisplayCurrencyIso: types_1.ECurrencyCode[this.getCountry], MobileCountryCode: types_1.EMobileCountryCode[this.getCountry] }, _data));
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
    /**
     * create a MyFatoorah invoice against a certain gateway return Invoice details
     * @param invoiceValue amount to charge
     * @param paymentMethodId ID for payment gateway
     */
    executePayment(invoiceValue, paymentMethodId, _data) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.execute, Object.assign({ InvoiceValue: invoiceValue, PaymentMethodId: paymentMethodId, DisplayCurrencyIso: types_1.ECurrencyCode[this.getCountry], MobileCountryCode: types_1.EMobileCountryCode[this.getCountry] }, _data));
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
    /**
     * return a status of your invoice
     * @param key
     * @param keyType
     */
    getPaymentStatus(key, keyType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.paymentStatus, {
                    Key: key,
                    KeyType: keyType
                });
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
    /**
     * making a refund request to MyFatoorah
     * @param refundRequest
     */
    makeRefund(refundRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.makeRefund, refundRequest);
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
    /**
     * get the status of the refund to check if it is refunded, rejected, or still pending.
     * @param key Value of the key type
     * @param keyType "InvoiceId" | "RefundReference" | "RefundId"
     */
    getRefundStatus(key, keyType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.apiInstance.post(config_1.endpoints.refundStatus, {
                    Key: key,
                    KeyType: keyType
                });
                return data;
            }
            catch (error) {
                return (0, config_1.handleAxiosError)(error);
            }
        });
    }
}
exports.default = MyFatoorah;
