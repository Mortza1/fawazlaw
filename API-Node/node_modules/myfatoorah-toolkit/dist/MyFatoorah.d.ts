import { TCountryCodes, TCurrencyCodes, IInitiatePaymentResponse, IExecutePaymentRequest, IExecutePaymentResponse, TKeyType, IPaymentInquiryResponse, TNotification, IPaymentRefundRequest, IPaymentRefundResponse, TRefundKeyType, RefundStatusResult } from './types';
export default class MyFatoorah {
    private countryIso;
    private testMode;
    private apiKey;
    private readonly apiUrl;
    private apiInstance;
    /**
     * Initialize your myfatoorah object
     * @param countryIso
     * @param testMode
     * @param apiKey
     */
    constructor(countryIso: TCountryCodes, testMode: boolean, apiKey?: string);
    get getCountry(): TCountryCodes;
    /**
     * return a list of Payment Methods that you need in Execute Payment
     * @param amount
     * @param currencyIso default currency depends on the countryIso
     */
    initiatePayment(amount: number, currencyIso?: TCurrencyCodes): Promise<IInitiatePaymentResponse>;
    /**
     * generate an invoice link that can be sent by any channel we support
     * @param invoiceValue
     * @param customerName
     * @param notificationOption EML | SMS | LNK | ALL
     * @param _data
     */
    sendPayment(invoiceValue: number, customerName: string, notificationOption: TNotification, _data?: IExecutePaymentRequest): Promise<IExecutePaymentResponse>;
    /**
     * create a MyFatoorah invoice against a certain gateway return Invoice details
     * @param invoiceValue amount to charge
     * @param paymentMethodId ID for payment gateway
     */
    executePayment(invoiceValue: number, paymentMethodId: number, _data?: IExecutePaymentRequest): Promise<IExecutePaymentResponse>;
    /**
     * return a status of your invoice
     * @param key
     * @param keyType
     */
    getPaymentStatus(key: string, keyType: TKeyType): Promise<IPaymentInquiryResponse>;
    /**
     * making a refund request to MyFatoorah
     * @param refundRequest
     */
    makeRefund(refundRequest: IPaymentRefundRequest): Promise<IPaymentRefundResponse>;
    /**
     * get the status of the refund to check if it is refunded, rejected, or still pending.
     * @param key Value of the key type
     * @param keyType "InvoiceId" | "RefundReference" | "RefundId"
     */
    getRefundStatus(key: string, keyType: TRefundKeyType): Promise<RefundStatusResult>;
}
